/* Copyright (C) 2023 Harry Clark */

/* SEGA Dreamcast Raspberry Pi Pico Interface */

/* THIS FILE PERTAINS TO THE FUNCTIONALTIY AND METHODS OF THE CONTROLLER */
/* BUS RELATIVE TO THE SEGA DREAMCAST'S HARDWARE */

/* THE MAPLE BUS IS AN ARCHITECTURE EXCLUSIVE TO THE SEGA DREAMCAST */
/* THAT SUPPORTS THE COMMUNICATIONS BETWEEN PERIPHERALS */

/* NESTED INCLUDES */

#include "maple.h"

/* SYSTEM INCLUDES */

#include <stdlib.h>

/* INSTANTIATE THE MAPLE BUS OBJECT AND USE THE MACROS */
/* TO ACCESS EACH OF THEIR COMPONENTS */

/* USING THE LOGICAL PORT VARIABLE REPRESENTED AS A CHAR */
/* WE CAN DISCERN THE 3 STAGES OF THE PORTS LIFETIME RELATIVE TO THE HOST */
/* THE MAIN DEVICE CONNECTED AND THE SUB-ROUTINE FOR THE DEVICES */
/* THIS IS THROUGH ACCESSING EACH OF THEIR RESPECTIVE VALUES AT RUNTIME */

static void MAPLE_INIT(MAPLE_BUS_PORT* BUS, MAPLE_PORT* PORT)
{
	MAPLE_PORT(PORT);
	MAPLE_BUS_PORT(MAPLE_PORT(PORT));
	MAPLE_BUS_ID(MAPLE_BUS_ID(PORT));

	MAPLE_DEVICE::LOGICAL_PORT* LOGIC_PORT[3];
	LOGIC_PORT[0] += MAPLE_BUS_ID();
	LOGIC_PORT[1] += MAPLE_BUS_PORT(sizeof(1, MAPLE_BUS_PORT()));
	LOGIC_PORT[2] += NULL;
	MAPLE_DEVICE::PLAYER_ITERATOR* PLAYER;
	PLAYER += MAPLE_PLAYER_NUM(sizeof(-1, MAPLE_BUS_ID(), MAPLE_PLAYER_NUM()));
}

/* FREE ANY REMAINING AND UNECESSARY MEMORY FROM THE HEAP */
/* THIS WILL ACT AS THE BUS' DECONSTRUCTOR METHOD */

static void MAPLE_FREE(MAPLE_DEVICE* DEVICE)
{
	free(DEVICE);
}
